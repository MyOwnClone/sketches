```xml
<Manifest>
  <AgentType>iOSUnified_UIKit</AgentType>
  <Guid>c9ed420a-6735-4c6b-a37a-1c728c1b5ccc</Guid>
  <Resources>
    <Resource>
      <NormalizedRelativePath>salmarin.jpg</NormalizedRelativePath>
      <LastSyncTime>2014-10-08T15:17:51Z</LastSyncTime>
    </Resource>
  </Resources>
</Manifest>
```
```csharp
using UIKit;
using Foundation;
using CoreGraphics;

int slapCount = 0;

var slaps = new UILabel (RootView.Frame) {
    Text = "Slap the Salmon!",
    TextColor = UIColor.Purple,
    TextAlignment = UITextAlignment.Center,
    Lines = 0,
    LineBreakMode = UILineBreakMode.WordWrap
};

var salmarinView = new UIImageView (UIImage.FromBundle ("salmarin.jpg"));

RootView.Add (salmarinView);
RootView.Add (slaps);

var behaviors = new UIDynamicBehavior [] {
    new UIGravityBehavior (salmarinView),
    new UICollisionBehavior (salmarinView) {
        TranslatesReferenceBoundsIntoBoundary = true
    },
    new UIDynamicItemBehavior (salmarinView) {
        Elasticity = .9f
    }
};

var animator = new UIDynamicAnimator (RootView);
animator.AddBehaviors (behaviors);

// function to make random small rotation tranformation
var random = new Random ();
Func<CGAffineTransform> makeRotation = () =>
    CGAffineTransform.MakeRotation (3f * ((float)random.NextDouble () - 0.5f));

salmarinView.Transform = makeRotation ();

var gameOver = DateTime.MinValue;
var originalFontSize = slaps.Font.PointSize;

// transparent full-frame button so we can tap to send image back to top
var button = new UIButton (UIButtonType.Custom) { Frame = RootView.Frame };
button.TouchDown += delegate {
    if (DateTime.Now - gameOver < TimeSpan.FromSeconds (10))
        return;

    // animator.UpdateItemUsingCurrentState doesn't respect
    // rotation changes, so reset it completely
    animator.RemoveAllBehaviors ();

    salmarinView.Transform = CGAffineTransform.MakeIdentity ();
    var frame = salmarinView.Frame;
    frame.Y = RootView.Frame.Top;
    salmarinView.Frame = frame;
    salmarinView.Transform = makeRotation ();
    animator.AddBehaviors (behaviors);

    slaps.TextColor = UIColor.FromHSB ((float)random.NextDouble (), 1, 0.75f);

    slapCount++;
    if (slapCount == 1)
        slaps.Font = slaps.Font.WithSize (originalFontSize);
    else if (slapCount <= 50)
        slaps.Font = slaps.Font.WithSize (slaps.Font.PointSize + 2f);

    var slapMessage = slapCount.ToString ();

    var emoji = (byte)random.Next (0x81, 0xBF);
    if (emoji == 0xB2 && slapCount > 50) {
        gameOver = DateTime.Now;
        slapCount = 0;
    }

    slaps.Text = String.Format ("{0}\n{1}", slapMessage,
        System.Text.Encoding.UTF8.GetString (new byte [] { 0xF0, 0x9F, 0x98, emoji }));
};

RootView.Add (button);

```
